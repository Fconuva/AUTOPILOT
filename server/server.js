const express = require('express');
const app = express();
const { main: doTask } = require('../ui');
const {execSync} = require('child_process')
const path = require('path')

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')))

app.post('/api/process-task', async (req, res) => {
  const task = req.body.task;

  if (!task) {
    return res.status(400).json({ error: 'Task is required' });
  }
  try {
    // TODO: Implement call to your GPT function here
    const response = await doTask(task);

    res.json({ result: response});
  } catch (error) {
    console.log(error)
    res.status(500).json(error);
  }
});


function runCI () {
  let ciSuccess
  try {
    // Execute the 'npm start' command synchronously
    const output = execSync('npm test', { stdio: 'inherit' });
    // If the command completes successfully, this line will be reached
    console.log('npm start command completed successfully');
    ciSuccess = true
  } catch (error) {
    // If an error occurs during execution, the catch block will be executed
    console.error(`npm start command failed with exit code ${error.status}`);
    ciSuccess = false
  }
}

function commitChanges(issueTitle, issueDescription, issueNumber){
  try {
    // Create new branch
    execSync(`git checkout -b issue-${issueNumber}`)
    console.log('Branch Created');

    // Stage all changes synchronously
    execSync('git add .');
    console.log('Changes staged successfully.');

    // Commit the staged changes synchronously
    execSync(`git commit -m "${issueTitle}"`);
    console.log('Changes committed successfully.');

    // Push branch
    execSync(`git push --set-upstream origin issue-${issueNumber}`)

    // Open PR
    execSync(`gh pr create --title "(auto) Issue: ${issueTitle}" --body "Task: ${issueDescription} \n Solves issue #${issueNumber}" \n GENERATED BY AUTOPILOT`);
    console.log("PR Opened 👍")
  } catch (error) {
    console.error(`Error: ${error.message}`);
  }

}

// Route to handle incoming webhook events
app.post('/issue', async (req, res) => {
    try {
      const event = req.body;
      console.log('Received webhook event:', event);
        
        // Check if the event is an issue event and has the required properties
      if (event.action === 'opened' && event.issue && event.issue.title && event.issue.body) {
        res.status(200).send('Working on issue');
        execSync('git checkout main');
        execSync('git pull');
        const title = event.issue.title.replace(/"/g, '\\"');;
        const description = event.issue.body.replace(/"/g, '\\"');;
        const number = event.issue.number
        const task = "title: " + title + "\ndescription: " + description
        // Call the doTask function with the issue's title and description
        console.log("STARTING A NEW TASK!")
        await doTask(task);
        // Run CI
        runCI()

        // commit and open PR
        commitChanges(title, description, number)

      } else {
        res.status(200).send('Issue doesnt qualify');
      }
  } catch (error) {
    console.error('Error processing webhook event:', error);
    res.status(500).send('Error processing webhook event');
  }
});

// Start the server
const port = process.env.PORT || 8080;
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});